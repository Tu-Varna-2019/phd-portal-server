package com.tuvarna.phd.service.impl;

import com.tuvarna.phd.entity.DoctoralCenter;
import com.tuvarna.phd.exception.DoctoralCenterException;
import com.tuvarna.phd.mapper.DoctoralCenterMapper;
import com.tuvarna.phd.repository.DoctoralCenterRepository;
import com.tuvarna.phd.repository.DoctoralCenterRoleRepository;
import com.tuvarna.phd.service.DoctoralCenterService;
import com.tuvarna.phd.service.dto.DoctoralCenterDTO;
import io.quarkus.mailer.Mail;
import io.quarkus.mailer.reactive.ReactiveMailer;
import io.smallrye.mutiny.Uni;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.transaction.Transactional;
import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.jboss.logging.Logger;

@ApplicationScoped
public class DoctoralCenterServiceImpl implements DoctoralCenterService {
  private final DoctoralCenterRepository doctoralCenterRepository;
  private final DoctoralCenterRoleRepository doctoralCenterRoleRepository;
  private final DoctoralCenterMapper doctoralCenterMapper;

  @Inject private Logger LOG = Logger.getLogger(DoctoralCenterServiceImpl.class);
  @Inject private ReactiveMailer mailer;

  @ConfigProperty(name = "client.base-url")
  private String clientBaseURL;

  @Inject
  public DoctoralCenterServiceImpl(
      DoctoralCenterRepository doctoralCenterRepository,
      DoctoralCenterMapper doctoralCenterMapper,
      DoctoralCenterRoleRepository doctoralCenterRoleRepository) {
    this.doctoralCenterRepository = doctoralCenterRepository;
    this.doctoralCenterMapper = doctoralCenterMapper;
    this.doctoralCenterRoleRepository = doctoralCenterRoleRepository;
  }

  @Override
  @Transactional
  public DoctoralCenter create(DoctoralCenterDTO doctoralCenterDTO) throws DoctoralCenterException {
    LOG.info("Service received a request to create a doctor center user: " + doctoralCenterDTO);

    DoctoralCenter doctoralCenter = this.doctoralCenterMapper.toEntity(doctoralCenterDTO);
    String email = doctoralCenter.getEmail();

    doctoralCenter.setRole(
        this.doctoralCenterRoleRepository.getRoleByRole(doctoralCenterDTO.getRole()));

    LOG.info("Check if user for the given email already exists: " + email);
    if (doctoralCenterRepository.existsByEmail(email))
      throw new DoctoralCenterException("User with email: " + email + " already exists!");

    LOG.info(
        "Great, user with that email does not exist! Creating an autogenerated password for user"
            + " now...");

    LOG.info("Now saving user to the database...");
    this.doctoralCenterRepository.save(doctoralCenter);

    return doctoralCenter;
  }
  ;

  public Uni<Void> sendEmail(String email, String password) {
    String body =
        String.format(
            """
            <html>
            <body>
                <h3>Welcome to the newly created PHD platform for TuVarna!</h3>
                <p>You have been added to the PHD platform as an expert of the doctoral center.</p>
                <p>Please don't share your password with anyone!</p>
                <p><strong>Password:</strong> %s </p>
                <p><strong>Link:</strong> %s </p>
                <p>Best regards,</p>
                <p>The PHD Platform Team</p>
            </body>
            </html>
            """,
            password, this.clientBaseURL + "/change/password");

    return this.mailer.send(Mail.withHtml(email, "Welcome to TuVarna!", body));
  }
}
